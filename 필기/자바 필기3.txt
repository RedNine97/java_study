문자열 => 숫자 (Integer.parseInt(문자열 상수)
문자열 => 소수점으로 변환 Double.parseDouble("23.5")
.equals()   <-- (==)

Scanner sc = new Scanner(System.in); //System.in 키보드
.next();( 문자 )    .nextInt();( 정수 )

private : 자기 클래스 내에서만
(default) : 같은 패키지 내에서만
protected : 같은 패키지 + 외부 패키지의 자식 클래스
public : 조건 하에 내부, 외부 모두 가능
=============================================================
11일 ~

callByValue(값에 의한 전달방법) => 매개변수를 전달(기본 자료형 8가지)
전달해서 메서드를 호출하는 방법(원본의 값을 복사해서 전달)
내용을 변경 O -> 원본의 내용은 변경 X (수정할 수 있다.)
----------------------------------------------------------------------
callByReference(주소에 의한 전달방법) => 매개변수를 전달(객체(=주소))
전달해서 메서드를 호출하는 방법(원본의 값을 전달)
내용을 변경 O -> 원본의 내용은 변경 O
객체를 전달 -> 객체의 주소값을 전달
주소(저장할 위치) = 포인터(pointer)
----------------------------------------------------------------------
static(정적의) -> 1. 정적변수 2. 정적메서드 3. 초기화 블럭(static { })
멤버변수(=인스터스변수) => 클래스 내부에서 선언된 변수 => 공유 X (독립적 저장)
정적변수(=클래스변수) => 모든 객체가 공유할 수 있도록 만들어진 변수
=> 클래스명.정적변수 or 객체명.정적변수
ex) 아파트 관리비(반장) 엘리베이터 수리, 회식,,
    차의 종류의 상관없이 차의 생산량의 합을 계산---> static int serialNumber; 
----------------------------------------------------------------------
final class명 => 상속금지(내용을 변경하면 안되는 클래스에 부여)
1. final +멤버변수 or 지역변수 => 상수화(변수의 값 고정)
2. final +메서드명 => 상속은 허용해주지만 오버라이딩 금지 X
----------------------------------------------------------------------
*******
메서드의 반환형을 통해서 객체를 얻어오는 방법 -> 자바의 메모리 사용량 확인
new 사용못함 X =>메서드의 반환형을 통해서 얻어옴, 매개변수 전달
  전체사용량 - 남은사용량 = 현재 사용중인 메모리양
System.out.println("before 사용량 => "+
(r.totalMemory()-r.freeMemory())/1024+"K");
  자바의 특징 -> 불필요로하는 메모리가 발생 -> 자동으로 메모리를 해제
test =null; //일부러 주소값을 지움 -> 데이터공간 낭비
  자동으로 해제시켜주는 메서드 -> gc()
System.gc(); // <- 수동으로 호출해주는 메서드
----------------------------------------------------------------------
next() => 단어중심, enter키 인식 (X) --->( nextInt() 정수, nextDouble() 실수, next() 문자 )
 : next().charAt(0); <--0,1,2,3   "abc"->'a' 'b' 'c'
nextLine() => 한라인의 문장을 입력받을때 사용, 띄어쓰기, enter키 인식 (O) 문자열 사용시
// if(z.equals("+")) {
// System.out.println(x+" + "+y+" = "+(x+y));
// }else if
----------------------------------------------------------------------
추상메서드 -> 메서드의 선언만 되어 있는 메서드이다. -> 형식)메서드명(~)
abstract public void go(); //추상메서드
public void go2() {} //내용이 없는 일반메서드 (추상메서드 X)
자식 클래스에서 public void go() {} //내용만 쓰지 않을뿐 일반메서드를 만든다.
----------------------------------------------------------------------
* 인터페이스 상속은 => 자식인터페이스 extends 부모인터페이스
* 클래스에서 상속은 -> 자식클래스 extends 부모클래스
* 클래스에서 인터페이스를 상속받을땐 
* => 자식클래스 implements 부모인터페이스, 부모인터페이스2,,,(다중상속 가능)
다향성 => 메서드명은 같지만 실제 내용은 다르다. -> 기능이 다 다르다.
----------------------------------------------------------------------
문자열 주소값 확인할때
System.out.println(System.identityHashCode(객체명));
String str ="abc" + "def" + "sss" + "ass"    <--- 안좋은 코딩 방법
String str = new StringBuffer("abc").append("def")  <-- 이렇게 코딩하셈
.append("sss").append("ass").toString();

if ( 객체==객체2(주소를 비교할때)    ,    변수==변수2(내용을 비교할때) )
if ( 객체의 내용끼리 비교하는 법은? => 객체.equals(객체) 
=> contentEquals()(요즘 많이 사용됨) )
------------------------------------------------------------------------
3개의 값 중 큰값 구하기
int getMaxPrint2(int a,int b,int c) {
  int max=(a>b)?a:b; //max=12
  max=(max>c)?max:c;
  return max; //return 계산결과값(변수) or 수식 or 객체
}
-------------------------------------------------------------------------
예외처리
객체명 <- 중간정도의 메세지
객체명.getMessage() <- 간단한 메세지
객체명.printStackTrace(); <- 추적한다.(에러의 관련된 모든 클래스를 추적)
 try { 
 }catch(에러명 객체명생성){  
 }finally {// 메모리에 저장된 데이터 파일로 저장하여 종료(DB연결해제)
   System.out.println("에러발생 유무와 상관없이 무조건 반드시 처리");
 }
--------------------------------------------------------------------------------
메모리에 각각의 자료형에 맞는 데이터를 변수에 저장
 1. 파일로 저장
FileOutputStream fos = new FileOutputStream("C:\\webtest\\3.java\\data.txt");
 2. 자바의 자료형에 맞게 포장 -> DataOutputStream
DataOutputStream dos = new DataOutputStream(fos);
 3. 메모리 자료형에 맞게 저장
char han = '한';
byte b =21;
String str = "bg\n";
byte ba[] = {65, 66, 67}; //A, B, C
 파일로 저장 => 형식) write 자료형(저장할 값)
dos.writeChar(han); //'한'
dos.writeByte(b); //21
dos.writeChars(str); //writeString (X)
dos.write(ba);   // 배열의 값을 매개변수로 저장 -> ABC
dos.close();
 // 추가
 // 만들어진 파일의 내용을 다시 읽어들여서 확인후 출력
DataInputStream dis = 
  new DataInputStream(
     new FileInputStream("C:\\webtest\\3.java\\data.txt"));
 // 변수 = dis.read자료형() <-> dos.write자료형(저장할 값)
        ,,,
byte bb[] = new byte[3]; //65,66,67
dis.read(bb);		
dis.close();
for (byte b2:bb) {
System.out.print((char)b2+"\t");
}
메서드를 사용?
System.out.println("=================");
String str2 = new String(bb);
System.out.println("str2 => "+ str2);

 // byte[] --> String 생성자를 사용
 // String -> byte[]로 변환 -> getBytes()
byte t[] = str2.getBytes(); //t[]={65, 66, 67};

for (byte b3:bb) {
System.out.print((char)b3+"\t");
----------------------------------------------------------------------------------
FileInputStream fis = 
new FileInputStream("C:\\webtest\\3.java\\WriteHello.java");
int read = 0; // 파일의 내용을 저장할 임시변수
 /*
  while(read!=-1) { // 파일이 계속해서 읽어들일 수 있는 상태라면
  read = fis.read(); // System.in.read(); 대신에 사용
  System.out.write(read); // 콘솔에 파일의 내용을 출력
  }
 */
while(true) { 
read = fis.read(); 
if(read==-1) break; // 파일의 끝에 도달하면 더 이상 출력 X
System.out.write(read);
}
--------------------------------------------------------------------------------
File f =new File("C:\\webtest\\3.java\\sawon.txt");
FileWriter fw = new FileWriter(f,true); // true => append(이어서 추가한다.)
---------------------------------------------------------------------------------
메서드명 뒤에 throws 예외처리 클래스명, 예외처리 클래스명2,,,
public static void main(String[] args) throws Exception {
 // 키보드로 부터 값을 입력(문자, 특수기호, 숫자) -> 재출력
int charRead; // System.in.read() => 아스키코드 값으로 저장
 // 더 이상 읽어들이지 않으면 -1을 리턴(= ctrl+z 입력)
 //char -> 0 ~ 65535
System.out.println("입력하고자 하는 문자열을 아무거나 입력?");
 // 제어문일 경우 -> for (X) -> while구문을 사용
 // 어떠한 글자라도 계속해서 입력 중이라면
while ((charRead=System.in.read()) >= 0)
System.out.write(charRead);
 // System.out.print(charRead);
--------------------------------------------------------------------------------
System.out.flush(); //버퍼에 쌓아놓지말고 데이터를 바로바로 출력시켜달라는 메서드
System.out.write(hello); //출력버퍼(배열 -> 데이터가 많다고 간주)   Hello World!















